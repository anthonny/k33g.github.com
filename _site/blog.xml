<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>K33G_ORG's blog</title>
		<description>programming, javascript, java, iOS, WebOS, Android, ...</description>
		<link>http://k33g.github.com/</link>
		
			<item>
				<title>Atom-shell, javascript everywhere</title>
				<description>&lt;h1&gt;Atom-shell, javascript everywhere!&lt;/h1&gt;

&lt;p&gt;Depuis quelques jours, la release publique de &lt;strong&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;&lt;/strong&gt; l&#39;éditeur de code de &lt;strong&gt;GitHub&lt;/strong&gt; est disponible. Atom, c&#39;est un ide léger (éditeur de code) à la SublimeText qui a comme spécificité d&#39;être développé en javascript, basé sur &lt;strong&gt;node.js&lt;/strong&gt; et &lt;strong&gt;Chromium&lt;/strong&gt;, avec la possibilité de développer &quot;autour&quot; en &lt;strong&gt;Coffeescript&lt;/strong&gt; (donc faire des plugins), mais aussi en javascript. Certes, Atom n&#39;a pas la vélocité d&#39;une application développée &quot;tout en C++&quot;, mais je trouve, à la vue de ses capacités que c&#39;est à lui tout seul un cas d&#39;usage démontrant que l&#39;on peut aller très loin en javascript.&lt;/p&gt;

&lt;p&gt;Mais ce que je trouve encore mieux, c&#39;est que parallèlement, &lt;strong&gt;GitHub&lt;/strong&gt; a publié &lt;strong&gt;&lt;a href=&quot;https://github.com/atom/atom-shell&quot;&gt;Atom-shell&lt;/a&gt;&lt;/strong&gt; : le framework de base qui a permis de développer &lt;strong&gt;Atom&lt;/strong&gt;. Cela signifie que vous avez à votre disposition les outils nécessaires pour faire des applications desktop &quot;à la Atom&quot;.&lt;/p&gt;

&lt;p&gt;D&#39;autres projets de ce type existent, notamment &lt;strong&gt;&lt;a href=&quot;https://github.com/rogerwang/node-webkit&quot;&gt;Node-Webkit&lt;/a&gt;&lt;/strong&gt; qui était dans la place avant &lt;strong&gt;Atom-shell&lt;/strong&gt; et qui n&#39;en n&#39;est pas moins intéressant, reposant sur les mêmes composants, et le projet est toujours très actif.&lt;/p&gt;

&lt;p&gt;Je vous explique donc rapidement comment vous pouvez faire une application avec &lt;strong&gt;Atom-shell&lt;/strong&gt;. Pour démarrer, il vous faut node.js, npm et Grunt.&lt;/p&gt;

&lt;h2&gt;Initialisation de l&#39;application et installation d&#39;Atom-shell&lt;/h2&gt;

&lt;p&gt;Commencez par créer un répertoire &lt;code&gt;myatom&lt;/code&gt; avec un sous-répertoire &lt;code&gt;build&lt;/code&gt; et un sous-répertoire &lt;code&gt;myatom-app&lt;/code&gt;. Ensuite dans le sous répertoire &lt;code&gt;build&lt;/code&gt;, créez 2 fichiers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gruntfile.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Contenu de &lt;code&gt;package.json&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;myatom-app-atom-build&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;devDependencies&quot;: {
    &quot;grunt&quot;: &quot;^0.4.4&quot;,
    &quot;grunt-download-atom-shell&quot;: &quot;^0.7.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Contenu de &lt;code&gt;Gruntfile.js&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;download-atom-shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.12.3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;outputDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./atom-shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grunt-download-atom-shell&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installer Atom-shell&lt;/h3&gt;

&lt;p&gt;Dans votre terminal préféré, allez dans le répertoire &lt;code&gt;build&lt;/code&gt;, et tapez les commandes suivantes :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cela va télécharger les dépendances nécessaires, puis :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grunt download-atom-shell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cela va déclencher la tâche Grunt qui va télécharger les ressources nécessaires d&#39;Atom-shell.&lt;/p&gt;

&lt;p&gt;Au bout de quelques instants vous aurez 2 nouveaux répertoires dans votre répertoire &lt;code&gt;build&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build/
├── node_modules/
└── atom-shell/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Créer l&#39;application&lt;/h2&gt;

&lt;p&gt;Donc normalement, vous devez avoir une structure de répertoires comme celle-ci :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;myatom/
├── build/
|   ├── node_modules/
|   └── atom-shell/
└── myatom-app/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créez dans le répertoire &lt;code&gt;myatom-app&lt;/code&gt; 3 fichiers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Contenu de  &lt;code&gt;package.json&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Vous précisez dans ce fichier le nom du script principal de votre application : &lt;code&gt;main.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;myatom-app&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;main&quot;: &quot;main.js&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Contenu de  &lt;code&gt;index.html&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Aujourd&#39;hui, nous allons rester simple :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Contenu de  &lt;code&gt;main.js&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Là nous avons un peu plus de choses :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;browser-window&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;menu&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dialog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Quit when all windows are closed.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;window-all-closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;darwin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;templateMenu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;submenu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Quit&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;accelerator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Command+Q&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildFromTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;templateMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setApplicationMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;menu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;à retenir&lt;/strong&gt; : &lt;code&gt;var BrowserWindow = require(&#39;browser-window&#39;);&lt;/code&gt; sert à créer la fenêtre native du navigateur, donc la fenêtre principale de votre application, celle dans laquelle sera chargée la page &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Lancez la bête!&lt;/h3&gt;

&lt;p&gt;Dans votre répertoire &lt;code&gt;myatom&lt;/code&gt;, lancez la commande :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build/atom-shell/Atom.app/Contents/MacOS/Atom ./myatom-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et votre killer app apparaît &lt;code&gt;\o/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/k33g/k33g.github.com/raw/master/images/myatomapp.png&quot; alt=&quot;Alt &amp;quot;myatomapp.png&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&#39;est fini pour aujourd&#39;hui&lt;/strong&gt;, mais vous pouvez aller lire la documentation : &lt;a href=&quot;https://github.com/atom/atom-shell/tree/master/docs&quot;&gt;https://github.com/atom/atom-shell/tree/master/docs&lt;/a&gt;&lt;/p&gt;
</description>
				<link>http://k33g.github.com/2014/05/10/ATOM-SHELL.html</link>
			</item>
		
			<item>
				<title>Faites vos outils avec npm et node</title>
				<description>&lt;h1&gt;Faites vos outils avec npm et node&lt;/h1&gt;

&lt;p&gt;Lorsque je code, j&#39;ai souvent des tâches répétitives (quel que soit le langage), ie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;écrire des modèles et des collections Backbone&lt;/li&gt;
&lt;li&gt;écrire des modèles Play&lt;/li&gt;
&lt;li&gt;écrire des routes pour Express.js&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Nul doute, que vous avez énormément d&#39;autres exemples en tête. L&#39;outil du moment pour régler ce type de problème est &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; (oui il y en a d&#39;autres, mais Yeoman c&#39;est &quot;hype&quot; ;)) et ensuite, ou vous avez de la chance, ou il faut écrire le plugin dont vous avez besoin. Dans certains cas, surtout si vous n&#39;avez pas besoin de quelque chose de complexe, vous pouvez rapidement écrire un utilitaire avec uniquemnt node et npm.&lt;/p&gt;

&lt;h2&gt;Spécifications (par exemple)&lt;/h2&gt;

&lt;p&gt;Je passe mon temps à écrire des modèles et des collections Backbone qui ressemblent à ceci :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*--- Human Model ---*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HumanModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;urlRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;humans&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*--- Humans Collection ---*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HumansCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;humans&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HumanModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Et j&#39;aimerais aller plus vite, juste taper &lt;code&gt;bb Human&lt;/code&gt; et obtenir mon fichier généré.&lt;/p&gt;

&lt;h2&gt;Juste fais-le ...&lt;/h2&gt;

&lt;h3&gt;package.json&lt;/h3&gt;

&lt;p&gt;Commencez par créer un répertoire &lt;code&gt;bbtools&lt;/code&gt;. Ensuite dans ce répertoire, créez un fichier &lt;code&gt;package.json&lt;/code&gt; avec le contenu suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
 &quot;name&quot;: &quot;bbtools&quot;,
 &quot;version&quot;: &quot;0.0.0&quot;,
 &quot;bin&quot;: { &quot;bb&quot;: &quot;bb.js&quot;},
 &quot;dependencies&quot;: {
   &quot;underscore&quot;: &quot;1.6.0&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L&#39;objectif étant de disposer d&#39;une commande &lt;code&gt;bb&lt;/code&gt; qui exécutera le fichier &lt;code&gt;bb.js&lt;/code&gt;. Notez &lt;code&gt;&quot;underscore&quot;: &quot;1.6.0&quot;&lt;/code&gt;, nous allons nous servir des capacités de &quot;templating&quot; de la librairie Underscore&lt;/p&gt;

&lt;h3&gt;Notre template&lt;/h3&gt;

&lt;p&gt;Créez (dans le même répertoire) un fichier &lt;code&gt;bb.tpl&lt;/code&gt; avec le contenu suivant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*--- &amp;lt;%= modelName %&amp;gt; Model ---*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;defaults&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;urlRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;%= modelName.toLowerCase() %&amp;gt;s&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*--- &amp;lt;%= modelName %&amp;gt;s Collection ---*/&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sCollection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;%= modelName.toLowerCase() %&amp;gt;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Le code applicatif&lt;/h3&gt;

&lt;p&gt;Créez (dans le même répertoire) un fichier &lt;code&gt;bb.js&lt;/code&gt; avec le contenu suivant :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.tpl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tpl&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;./bb.tpl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.js&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Explications&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#!/usr/bin/env node&lt;/code&gt; : rendra le fichier exécutable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_.template(require(&quot;./bb.tpl&quot;))&lt;/code&gt; va lire notre fichier &lt;code&gt;bb.tpl&lt;/code&gt; et le transforme en objet template pour Underscore&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.cwd()&lt;/code&gt; permet de connaître le répertoire d&#39;où l&#39;on appelle la commande &lt;code&gt;bb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;process.argv[2]&lt;/code&gt; permet d&#39;obtenir le 1er argument passé à la commande &lt;code&gt;bb&lt;/code&gt; (comme par exemple &lt;code&gt;bb Human&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tpl({modelName :model_name })&lt;/code&gt; : on &quot;explique&quot; au template que l&#39;on passe le contenu de &lt;code&gt;model_name&lt;/code&gt; à &lt;code&gt;modelName&lt;/code&gt; définie dans le template&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Enregistrez votre outil&lt;/h3&gt;

&lt;p&gt;Pour que votre nouvelle commande soit disponible &quot;partout&quot; (pouvoir l&#39;appeler de n&#39;importe quel répertoire), tapez la commande suivante (on est toujours dans notre répertoire de développement) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm link
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ce n&#39;est pas déjà fait, cela va télécharger les dépendances nécessaires (underscrore dans notre cas), puis créer un &quot;lien symbolique&quot; vers votre fichier &lt;code&gt;bb.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maintenant, de n&#39;importe où, dans une console (terminal), vous pouvez taper &lt;code&gt;bb Animal&lt;/code&gt; et cela vous génèrera votre fichier &lt;code&gt;Animal.js&lt;/code&gt; avec votre modèle et votre collection.&lt;/p&gt;

&lt;p&gt;Voilà, c&#39;est très simple et utile. Si vous sentez que votre outil devient une usine à gaz, passez quand même à Yeoman ;).&lt;/p&gt;
</description>
				<link>http://k33g.github.com/2014/05/09/NPM-NODE-CLI.html</link>
			</item>
		
			<item>
				<title>MixITFR2014</title>
				<description>&lt;h1&gt;Mix-it-2014&lt;/h1&gt;

&lt;p&gt;Un de mes plus grands regrets sera de ne pas avoir été speaker lors de Mix-IT, mais quand j&#39;ai vu le programme proposé je me suis dit que je n&#39;avais pas mis la barre assez haute (j&#39;ai un an pour me creuser la tête et trouver quelque chose d&#39;original). Et pourtant quand j&#39;ai vu les thèmes, ma 1ère réaction a été de me dire, &quot;ok, c&#39;est du haut niveau, mais ça s&#39;éloigne de mes envies&quot;. Mais je me suis quand même inscrit, ne serait-ce que pour soutenir l&#39;équipe qui fait un boulot formidable et du coup être un parmi tant d&#39;autres qui participent à la pérennité de cette conférence. C&#39;était aussi l&#39;occasion de voir et de revoir des personnes que j&#39;apprécie mais que je ne croise pas assez souvent.&lt;/p&gt;

&lt;p&gt;Eh bien ma 1ère impression était fausse, j&#39;y ai vraiment trouvé mon compte. Avec du recul, je dirais que l&#39;équipe a préparé et &quot;beloté&quot; un programme qui s&#39;adressait à un public plus large et qui permettait à chacun d&#39;y trouver son compte, et j&#39;y ai trouvé le mien. Donc déjà rien que pour ça : chapeau!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/k33g/k33g.github.com/raw/master/images/mixit14-01.png&quot; alt=&quot;Alt &amp;quot;mixit14-01.png&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;J&#39;ai aimé, j&#39;ai pas aimé ...&lt;/h2&gt;

&lt;p&gt;Alors, étant &quot;speaker junior&quot; (et pourtant &quot;geek presque senior&quot;), et du coup sachant comme ça peut être dur de parler en public, que dès fois ce n&#39;est pas ton jour, je ne me permettrais pas de dire &quot;ah il était mauvais!&quot; : sachez que le gars qui monte sur scène, il en a des énormes et qu&#39;il a envie de vous parler de quelque chose qui le passionne.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;La seul fois où j&#39;aurais à la limite l&#39;envie d&#39;être &quot;désagréable&quot;, ce sera les fois où le speaker tient des propos désobligeants, n&#39;a n&#39;en rien à faire de son public et n&#39;est là que pour promouvoir sa boutique sans apporter quoique ce soit d&#39;autre au public. Mais je n&#39;ai rien vu de tout ça.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alors, y-a-t-il des choses que je n&#39;ai pas aimées ? Oui, mais c&#39;est uniquement parce que le sujet ne me convenait pas, et en &lt;strong&gt;échangeant&lt;/strong&gt; à la sortie vous comprendrez que d&#39;autres ont aimé. N&#39;oubliez pas ce principe d&#39;&lt;strong&gt;échange&lt;/strong&gt;, c&#39;est aussi ça l&#39;intérêt d&#39;aller dans des conférences comme Mix-IT.&lt;/p&gt;

&lt;h2&gt;Oui, mais du coup est-ce qu&#39;il y a quelque chose qui t&#39;a plu ?&lt;/h2&gt;

&lt;h3&gt;Les Aliens&lt;/h3&gt;

&lt;p&gt;J&#39;ai aimé les &lt;strong&gt;Aliens&lt;/strong&gt; et notamment : &lt;a href=&quot;http://www.mix-it.fr/profile/lionel&quot;&gt;Lionel Dricot&lt;/a&gt; qui lors d&#39;une keynote nous a exposé sa vision du &lt;strong&gt;Système&lt;/strong&gt; (financier, économique, ...) d&#39;aujourd&#39;hui et de ce qu&#39;il pourrait être demain. Les 1ères secondes, je me suis dit &lt;em&gt;&quot;mais qu&#39;est ce que c&#39;est que ça!?&quot;&lt;/em&gt;, et le reste de la keynote j&#39;ai été scotché à mon siège. Une bonne bouffée d&#39;oxygène et d&#39;optimisme. &lt;em&gt;En passant, vu ses pompes, je suis sûr qu&#39;il connaît Pamela Fox ;)&lt;/em&gt;. Lisez le! &lt;a href=&quot;http://ploum.net/&quot;&gt;http://ploum.net/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ensuite, toujours chez les Aliens :&lt;a href=&quot;http://www.mix-it.fr/profile/Rieul&quot;&gt;Rieul Techer&lt;/a&gt; qui lors de sa présentation m&#39;a rappelé mes expérimentations, petit enfant, avec mon microscope et des mélanges improbables et odorants qui ont définitivement bousillé la moquette de ma chambre au grand dam de ma mère. Et il nous a expliqué que l&#39;on pouvait continuer à faire cela même adulte avec la possibilité de faire avancer le monde et faire de grandes choses à partir de peu (&lt;em&gt;Et là c&#39;est ma femme qui va me pourrir quand elle s&#39;apercevra que j&#39;ai décidé de transformer la cuisine en laboratoire :)&lt;/em&gt;). Rieul a donc parlé du &lt;strong&gt;&quot; DoItYourself biology pour une science ouverte&quot;&lt;/strong&gt;, je vous engage à creuser le sujet, c&#39;est passionnant et là aussi ça laisse pas mal d&#39;espoir pour notre futur.&lt;/p&gt;

&lt;h3&gt;Dans un registre plus technique ...&lt;/h3&gt;

&lt;p&gt;Je suis allé voir entre autres :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/520/rapport-cout-performance-de-differentes-stacks-web&quot;&gt;Rapport coût/performance de différentes stacks Web&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/nfonrose&quot;&gt;@nfonrose&lt;/a&gt;, j&#39;aurais aimé des chiffres, mais ça m&#39;a donné pas mal d&#39;idées et d&#39;informations par rapport à ce que l&#39;on aurait pu faire sur notre prez à DevoxxFR (cf. mon billet précédent &lt;a href=&quot;http://k33g.github.io/2014/04/26/DEVOXXFR14.html&quot;&gt;Devoxx France Ed° 2014 : &quot;Lavage de cerveau&quot;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/500/machine-learning-et-regulation-numerique&quot;&gt;Machine learning et régulation numérique&lt;/a&gt; avec &lt;a href=&quot;https://twitter.com/glaforge&quot;&gt;@glaforge&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/DidierGirard&quot;&gt;DidierGirard&lt;/a&gt; : c&#39;était passionnant, j&#39;avais eu une mission sur le sujet un peu avant 2000 (si si) et on n&#39;y connaissait rien, j&#39;aurais bien aimé avoir cette prez :). C&#39;était aussi l&#39;occasion de voir Guillaume Laforge sur d&#39;autres sujets que Groovy et c&#39;était bien.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/424/angularjs-from-scratch&quot;&gt;AngularJS from scratch&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/Swiip&quot;&gt;@Swiip&lt;/a&gt; &lt;em&gt;(alias Matthieu Lux de LyonJS)&lt;/em&gt; et &lt;a href=&quot;https://twitter.com/olivierhuber&quot;&gt;@olivierhuber&lt;/a&gt; : je ne suis pas un grand fan d&#39;Angular, mais leur atelier était brillant : partir de zéro pour ré-écrire les grands principes d&#39;Angular, je trouve le principe excellent et particulièrement formateur et j&#39;y retournerais! (&lt;em&gt;j&#39;avais un gros rhume, faut que je termine toutes les étapes&lt;/em&gt;) Si ce principe pouvait faire des petits, ça serait excellent (&lt;em&gt;Backbone from scratch, Golo from scratch, ...&lt;/em&gt;). Encore Bravo!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/330/le-mythe-du-framework-agile&quot;&gt;Le mythe du framework agile&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/BodySplash&quot;&gt;BodySplash&lt;/a&gt; alias Jean-Baptiste Dusseaut, le gars qui t&#39;explique que tu as tout faux de bosser avec ton framework préféré qui fait tout (ex Play, mais pas que), au début tu grinces des dents, c&#39;est &quot;trollesque&quot; mais argumenté (donc intelligent et constructif), il t&#39;explique pourquoi à partir d&#39;expériences vécues, j&#39;ai appris 2,3 trucs en plus et suis reparti avec quelques idées et sujets à creuser (reste juste à trouver du temps ou à ne pas dormir). Ce mec est à suivre!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/361/tour-d-horizon-de-node-js&quot;&gt;Tour d’horizon de Node.js&lt;/a&gt; : là j&#39;y suis allé, mais pas pour le sujet (que j&#39;affectionne pourtant) mais pour le speaker &lt;a href=&quot;https://twitter.com/porteneuve&quot;&gt;Christophe Porteneuve&lt;/a&gt; : si un jour j&#39;arrive à dépasser le cap de &quot;speaker junior&quot; je voudrais avoir son aisance. Christophe est techniquement brillant, c&#39;est incontestable, mais c&#39;est aussi un &quot;showman&quot; et je trouve qu&#39;avec les années il s&#39;améliore réellement : d&#39;aucuns le trouvent un peu trop &quot;trollesque&quot; et moi je trouve qu&#39;il arrive maintenant à pondérer ça admirablement. Donc même si vous n&#39;aimez pas le javascript, quand Christophe Porteneuve passe pas loin de chez vous, allez le voir.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Mix-Teen&lt;/h3&gt;

&lt;p&gt;Cette édition de Mix-IT a hébergé un nouveau projet dédié aux plus jeunes : &lt;strong&gt;&lt;a href=&quot;http://www.mix-it.fr/mixit14/mixteen&quot;&gt;Mix-Teen&lt;/a&gt;&lt;/strong&gt; destiné à initier les enfants à la programmation. Je n&#39;y ai pas participé, là c&#39;était pour mes 2 rejetons qui ont adoré, et j&#39;entends plus parler de l&#39;équipe que de Scratch ou Algoïd, donc j&#39;imagine que les &lt;strong&gt;adultes ont été très bons&lt;/strong&gt;, donc &lt;strong&gt;félicitations&lt;/strong&gt; pour avoir tenu autant de gamins tout un après midi. Petit clin d’œil amical à Audrey (Ma fille est très fière d&#39;avoir pu te faire un bisou, j&#39;espère qu&#39;elle ne ta pas refiler son énorme rhume) et à Thierry (je ne sais pas si Junior sera &quot;informaticien&quot;, mais Thierry par ci, Thierry par là ...).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/k33g/k33g.github.com/raw/master/images/mix-teen-01.png&quot; alt=&quot;Alt &amp;quot;mix-teen-01.png&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Et &lt;strong&gt;bravo aux enfants&lt;/strong&gt; à peine impressionnés par le public. &lt;em&gt;(mais pourquoi je me stresse autant?)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Des regrets ?&lt;/h3&gt;

&lt;p&gt;Oh oui : il y a plein de choses que je n&#39;ai pas pu voir. Il faudrait faire 2 jours supplémentaires pour pouvoir rejouer la conférences ;), j&#39;aurais aimé voir (mais j&#39;y arriverais) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/462/devops-en-parler-c-est-bien-en-faire-c-est-mieux&quot;&gt;Devops, en parler c&#39;est bien, en faire c&#39;est mieux&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/sylvainMougenot&quot;&gt;@sylvainMougenot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/388/application-web-moderne-en-java-the-codestory-way&quot;&gt;Application Web Moderne en Java. The CodeStory Way&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/dgageot&quot;&gt;@dgageot&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/morlhon&quot;&gt;@morlhon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mix-it.fr/session/365/prenez-le-controle-d-un-aeroport-avec-akka&quot;&gt;Prenez le contrôle d&#39;un aéroport avec Akka&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/jeanhelou&quot;&gt;@jeanhelou&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/xbucchiotty&quot;&gt;@xbucchiotty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Et enfin, au risque de ne pas tout comprendre &lt;a href=&quot;http://www.mix-it.fr/session/401/lets-invoke-dynamite-in-javaee-with-invokedynamic&quot;&gt;Let&#39;s Invoke Dynamite in JavaEE with InvokeDynamic&lt;/a&gt; par &lt;a href=&quot;https://twitter.com/antoine_sd&quot;&gt;@antoine_sd&lt;/a&gt; mon autre modèle de speaker&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Donc ... Vivement l&#39;an prochain et encore bravo et merci de m&#39;avoir étonné!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;La semaine prochaine je vous parle avec beaucoup de retard de 2 autres conférences qui m&#39;ont beaucoup plus aussi : SoftShake et Sainté Mobile Days.&lt;/em&gt;&lt;/p&gt;
</description>
				<link>http://k33g.github.com/2014/05/04/MIXIT-2014.html</link>
			</item>
		
			<item>
				<title>optimisation de performances avec node et express</title>
				<description>&lt;h1&gt;Optimisation de performances avec Node et Express&lt;/h1&gt;

&lt;p&gt;Suite à la présentation de &lt;strong&gt;Jeff Maury&lt;/strong&gt; à laquelle j&#39;ai eu le plaisir de participer à Devoxx France 2014 sur les performances web (&lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/TYU-863/Web%20performances,%20regardons%20les%20r%C3%A9sultats%20de%20pr%C3%A8s&quot;&gt;Web performances, regardons les résultats de près&lt;/a&gt;), j&#39;ai eu quelques retours intéressants sur la partie Node, notamment par &lt;a href=&quot;https://twitter.com/alexiskinsella&quot;&gt;@alexiskinsella&lt;/a&gt;. Du coup j&#39;ai décidé de tenter de mettre en œuvre ses conseils.&lt;/p&gt;

&lt;p&gt;Alors, c&#39;est un peu rébarbatif à mettre en œuvre, à lire aussi, mais les conclusions sont intéressantes.&lt;/p&gt;

&lt;p&gt;N&#39;ayant pas ce week-end d&#39;instance sur le cloud à ma disposition, j&#39;ai testé de la manière suivante :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mon serveur d&#39;application (node + express) dans une VM Linux (2 procs + 1 Go de ram)&lt;/li&gt;
&lt;li&gt;les tests lancés à partir du host avec &lt;a href=&quot;https://github.com/excilys/gatling&quot;&gt;Gatling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Pour commencer j&#39;ai utilisé du node 0.6 puis du node 0.11, du express 3.5.1 puis du express 4.1.&lt;/p&gt;

&lt;p&gt;J&#39;ai testé 2 services web qui retournent tous les 2 du json :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;un service qui ramène une liste de films (toujours la même, tous les films) issue d&#39;un fichier json&lt;/li&gt;
&lt;li&gt;un service qui ramène les 300 1ers films d&#39;une catégorie donnée&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;J&#39;ai lancé 22 tests, qui m&#39;ont déjà permis de tirer quelques conclusions à propos de node/express mais aussi de mes jeux de tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Je sais que mon environnement de tests n&#39;est pas le plus adapté à une situation réel, mais cela permet déjà de mettre en œuvre quelques optimisations et de vérifier certaines hypothèses.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vous trouverez :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;les codes javascript par ici : &lt;a href=&quot;https://github.com/k33g/movie.buddy.webperfs/tree/master/node.experiments&quot;&gt;https://github.com/k33g/movie.buddy.webperfs/tree/master/node.experiments&lt;/a&gt; &lt;strong&gt;Attention, tout n&#39;est pas optimisé, c&#39;est de l&#39;expérimentation, donc à prendre avec des pincettes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;les codes de test sont par là : &lt;a href=&quot;https://github.com/k33g/movie.buddy.webperfs/tree/master/tests&quot;&gt;https://github.com/k33g/movie.buddy.webperfs/tree/master/tests&lt;/a&gt; &lt;strong&gt;Attention ... Même remarque ;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Code des services&lt;/h2&gt;

&lt;p&gt;Je vais donc tester 2 services :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tous les films&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var movies = (JSON.parse(fs.readFileSync(&quot;./db/movies.json&quot;, &quot;utf8&quot;)));

app.get(&quot;/movies&quot;, function(req, res) {
  res.send(movies);
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;N 1ers films d&#39;une catégorie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;puis&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(new RegExp(req.params.genre.toLowerCase()),&quot;g&quot;) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Test 1er service : Charger tous les films&lt;/h3&gt;

&lt;h4&gt;Code du test&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class AllMoviesLoadingScenario extends Simulation {
  val title = System.getProperty(&quot;title&quot;, &quot;localhost&quot;)
  val server = System.getProperty(&quot;buddyserver&quot;, &quot;http://192.168.128.142:3000&quot;);
  val totalUsers = toInt(System.getProperty(&quot;gatling.users&quot;, &quot;100&quot;));
  val loops = toInt(System.getProperty(&quot;gatling.loops&quot;, &quot;100&quot;));
  val scn = scenario(&quot;Loading all movies (&quot; + totalUsers + &quot; users/&quot; + loops + &quot; loops)&quot;).repeat(loops) {
    exec(
      http(&quot;Loading all movies&quot;)
        .get(server + &quot;/movies&quot;)
        .check(status.is(200)))
  }
  setUp(scn
    .inject(ramp(totalUsers users) over (totalUsers seconds)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Résultats&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                           &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 01- Tous les films        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 1578         &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Comme cela, même sans comparer avec une autre techno &lt;em&gt;(ce sera un autre exercice)&lt;/em&gt;, ce n&#39;est pas super puissant ...&lt;/p&gt;

&lt;h4&gt;Optimisation du service&lt;/h4&gt;

&lt;p&gt;Avant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies&quot;, function(req, res) {
  res.send(movies);
}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies&quot;, function(req, res) {
  res.sendfile(&quot;./db/movies.json&quot;, &quot;utf8&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Résultats après optimisation&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                           &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 02- Tous les films        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h4&gt;???&lt;/h4&gt;

&lt;p&gt;Déjà allez lire l&#39;introduction à node par &lt;strong&gt;Cédric Exbrayat&lt;/strong&gt; &lt;a href=&quot;http://hypedrivendev.wordpress.com/2011/06/28/getting-started-with-node-js-part-1/&quot;&gt;http://hypedrivendev.wordpress.com/2011/06/28/getting-started-with-node-js-part-1/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Je cite : &lt;em&gt;&quot;Node.js ne se base pas sur des threads : c’est un serveur asynchrone qui utilise un process monothread et des I/O non bloquants. L’asynchronisme permet au thread d’exécuter des callbacks lorsqu’il est notifié d’une connexion&quot;&lt;/em&gt; ... &lt;em&gt;&quot;Les I/O regroupent les accès disques, accès base de données, accès réseaux, bref tout ce qui prend du temps sur un ordinateur moderne (latence, débit limité etc…). Ici tous les I/O sont non bloquants, c’est à dire que tout appel est effectué en asynchrone, avec un callback qui sera exécuté une fois l’accès réalisé.&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En fait la 1ère fois, j&#39;allais lire mes données en mémoire, du coup je ne profitais pas des I/O et finalement je perdais les avantages de l&#39;asynchrone.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Merci encore à Rémi Forax pour ses explications sur le sujet :)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Même test avec Node 0.11&lt;/h4&gt;

&lt;p&gt;J&#39;ai ensuite upgradé la version de node, pas d&#39;amélioration notable&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                           &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 06- Tous les films        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Pas d&#39;amélioration notable&lt;/p&gt;

&lt;h3&gt;Test 2ème service : Charger un certain nombre de films dans une catégorie donnée&lt;/h3&gt;

&lt;p&gt;On est à nouveau avec du Node 0.6&lt;/p&gt;

&lt;h4&gt;Code du test&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class SomeMoviesLoadingScenario extends Simulation {
  val title = System.getProperty(&quot;title&quot;, &quot;localhost&quot;)
  val server = System.getProperty(&quot;buddyserver&quot;, &quot;http://192.168.128.142:3000&quot;);

  val totalUsers = Integer.getInteger(&quot;gatling.users&quot;, 100).toInt
  val delayInjection = Integer.getInteger(&quot;gatling.delay&quot;, 100).toInt
  val loops = Integer.getInteger(&quot;gatling.loops&quot;, 100).toInt
  val kindOfSearch = System.getProperty(&quot;kinsofsearch&quot;, &quot;genre&quot;)
  val searchValue = System.getProperty(&quot;searchvalue&quot;, &quot;comedy&quot;)
  val limit = System.getProperty(&quot;limit&quot;, &quot;300&quot;)

  val scn = scenario(s&quot;$title : Loading some (max $limit) movies by $kindOfSearch  = $searchValue ($totalUsers users/$loops loops)&quot;)
    .repeat(loops) {
    exec(
      http(s&quot;Loading some (max $limit) movies by $kindOfSearch = $searchValue&quot;)
        .get(server + &quot;/movies/search/&quot; + kindOfSearch + &quot;/&quot; + searchValue + &quot;/&quot; +limit)
        .check(status.is(200)))
  }

  setUp(scn
    .inject(ramp(totalUsers) over (delayInjection seconds))
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Résultats&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                          &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 03- 300 1ères comédies   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h4&gt;Optimisation 1 du service&lt;/h4&gt;

&lt;p&gt;Alors on m&#39;a conseillé plusieurs optimisations, comme &quot;sortir&quot; &lt;code&gt;new RegExp()&lt;/code&gt; de &lt;code&gt;filter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Avant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(new RegExp(req.params.genre.toLowerCase()),&quot;g&quot;) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  var regex = new RegExp(req.params.genre.toLowerCase(),&quot;g&quot;);
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(regex) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Résultats&lt;/h4&gt;

&lt;p&gt;J&#39;ai obtenu les mêmes résultats&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                          &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 04- 300 1ères comédies   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Je serais tenté de dire que la condition de &lt;code&gt;filter&lt;/code&gt; n&#39;est exécuté qu&#39;une seule fois, ce n&#39;est pas un &lt;code&gt;forEach&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Optimisation 2 du service&lt;/h4&gt;

&lt;p&gt;On m&#39;a aussi conseillé de ne pas utiliser &lt;code&gt;toLowerCase()&lt;/code&gt; mais plutôt la clause &lt;code&gt;i&lt;/code&gt; (insensitive) des regex.&lt;/p&gt;

&lt;p&gt;Avant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  var regex = new RegExp(req.params.genre.toLowerCase(),&quot;g&quot;);
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(regex) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  var regex = new RegExp(req.params.genre,&quot;i&quot;);
  res.send(movies.filter(function(movie) {
    return movie.Genre.search(regex) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&#39;ai là aussi, obtenu les mêmes résultats&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                          &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 05- 300 1ères comédies   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Je serais donc tenté de dire que la VM de Node est plutôt bien optimisée, ainsi que l&#39;implémentation de &lt;code&gt;toLowerCase()&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Optimisation 3 du service : avec Node 0.11&lt;/h4&gt;

&lt;p&gt;J&#39;ai ensuite upgradé la version de node à 0.11 : mêmes résultats, pas d&#39;amélioration notable avec la dernière version de Node&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                          &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 07- 300 1ères comédies   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h4&gt;Optimisation 4 du service : avec Node 0.11 et en jouant avec &lt;code&gt;http.globalAgent.maxSockets&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;En standard sur ma VM j&#39;ai &lt;code&gt;http.globalAgent.maxSockets = Infinity&lt;/code&gt;, j&#39;ai forcé la valeur à 5, 50 puis 150, je n&#39;ai pas eu d&#39;amélioration :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                              &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 08- 300 1ères maxSockets=5   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 09- 300 1ères maxSockets=50  &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 10- 300 1ères maxSockets=150 &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Je m&#39;aperçois que Node n&#39;a aucun problème à servir ses 100 requêtes secondes, du coup je me décide à le stresser un peu et modifie mon code de test :&lt;/p&gt;

&lt;h3&gt;Test 2ème service &quot;plus dur&quot; : Charger un certain nombre de films dans une catégorie donnée&lt;/h3&gt;

&lt;p&gt;Pour le même délai d&#39;injection, je vais augmenter le nombre d&#39;utilisateurs :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val totalUsers = Integer.getInteger(&quot;gatling.users&quot;, 300).toInt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et le délai (qui ne change pas)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val delayInjection = Integer.getInteger(&quot;gatling.delay&quot;, 100).toInt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ce qui nous donnera 30 000 requêtes&lt;/p&gt;

&lt;h4&gt;Code du test (toujours en Node 0.11)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class SomeMoviesLoadingScenarioHarder extends Simulation {
  val title = System.getProperty(&quot;title&quot;, &quot;localhost&quot;)
  val server = System.getProperty(&quot;buddyserver&quot;, &quot;http://192.168.128.142:3000&quot;);

  val totalUsers = Integer.getInteger(&quot;gatling.users&quot;, 300).toInt
  val delayInjection = Integer.getInteger(&quot;gatling.delay&quot;, 100).toInt
  val loops = Integer.getInteger(&quot;gatling.loops&quot;, 100).toInt
  val kindOfSearch = System.getProperty(&quot;kinsofsearch&quot;, &quot;genre&quot;)
  val searchValue = System.getProperty(&quot;searchvalue&quot;, &quot;comedy&quot;)
  val limit = System.getProperty(&quot;limit&quot;, &quot;300&quot;)

  val scn = scenario(s&quot;$title : Loading some (max $limit) movies by $kindOfSearch  = $searchValue ($totalUsers users/$loops loops)&quot;)
    .repeat(loops) {
    exec(
      http(s&quot;Loading some (max $limit) movies by $kindOfSearch = $searchValue&quot;)
        .get(server + &quot;/movies/search/&quot; + kindOfSearch + &quot;/&quot; + searchValue + &quot;/&quot; +limit)
        .check(status.is(200)))
  }

  setUp(scn
    .inject(ramp(totalUsers) over (delayInjection seconds))
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je repars du code non optimisé du service :&lt;/p&gt;

&lt;p&gt;Avant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(new RegExp(req.params.genre.toLowerCase()),&quot;g&quot;) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Après :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  var regex = new RegExp(req.params.genre.toLowerCase(),&quot;g&quot;);
  res.send(movies.filter(function(movie) {
    return movie.Genre.toLowerCase().search(regex) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;app.get(&quot;/movies/search/genre/:genre/:limit&quot;, function(req, res) {
  var regex = new RegExp(req.params.genre,&quot;i&quot;);
  res.send(movies.filter(function(movie) {
    return movie.Genre.search(regex) != -1;
  }).slice(0,req.params.limit));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Puis : &lt;code&gt;http.globalAgent.maxSockets = 400&lt;/code&gt;, puis &lt;code&gt;http.globalAgent.maxSockets = 10&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Résultats&lt;/h4&gt;

&lt;p&gt;On voit bien que cette fois-ci, on a &quot;stressé&quot; node :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                  &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 11- 300 1ères pas d&#39;optimisation &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 132      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9008      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5926               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 15066      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 227          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 12- 300 1ères optimisation 1     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 138      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9411      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5936               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14653      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 217          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 13- 300 1ères optimisation 2     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 132      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9264      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 4434               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 16302      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 227          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 14- 300 1ères maxSockets=400     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 130      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9173      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6322               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14505      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 230          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 15- 300 1ères maxSockets=10      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 130      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5957      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 7220               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 16823      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 230          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Ma première conclusion serait de garder la valeur par défaut de &lt;code&gt;http.globalAgent.maxSockets&lt;/code&gt; et creuser sur les optimisations concernant les regexs (faire plus de tirs), mais je continue à penser que &lt;code&gt;toLowerCase()&lt;/code&gt; fait très bien son boulot.&lt;/p&gt;

&lt;p&gt;Avant de passer à la suite, je vais aussi modifier mon code de test pour le chargement de tous les films, là aussi avec 300 utilisateurs avec un délai de 100 secondes.&lt;/p&gt;

&lt;h4&gt;Code du test (toujours en Node 0.11)&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;class AllMoviesLoadingScenarioHarder extends Simulation {
  val title = System.getProperty(&quot;title&quot;, &quot;localhost&quot;)
  val server = System.getProperty(&quot;buddyserver&quot;, &quot;http://192.168.128.142:3000&quot;);
  val totalUsers = toInt(System.getProperty(&quot;gatling.users&quot;, &quot;300&quot;));
  val delayInjection = toInt(System.getProperty(&quot;gatling.delay&quot;, &quot;100&quot;));

  val loops = toInt(System.getProperty(&quot;gatling.loops&quot;, &quot;100&quot;));
  val scn = scenario(&quot;Loading all movies (&quot; + totalUsers + &quot; users/&quot; + loops + &quot; loops)&quot;).repeat(loops) {
    exec(
      http(&quot;Loading all movies&quot;)
        .get(server + &quot;/movies&quot;)
        .check(status.is(200)))
  }

  setUp(scn
    .inject(ramp(totalUsers users) over (delayInjection seconds)))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Résultats&lt;/h4&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                                   &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 16- Tous les films (fichier sur disque) 300 users &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 141      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 8558      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6487               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14955      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 213          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h2&gt;Module cluster&lt;/h2&gt;

&lt;p&gt;Maintenant je vais essayer le module cluster de node avec nos 2 services : &quot;Tous les films&quot; et &quot;les 300 1ères comédies&quot;, toujours sur du node 0.11. L&#39;utilisation du module cluster de node, implique quelques modifications. Globalement, votre code applicatif est déplacé dans le &lt;code&gt;else&lt;/code&gt; ci-dessous :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var cluster = require(&#39;cluster&#39;);

//...

// Code to run if we&#39;re in the master process
if (cluster.isMaster) {

  // Count the machine&#39;s CPUs
  var cpuCount = require(&#39;os&#39;).cpus().length;

  // Create a worker for each CPU
  for (var i = 0; i &amp;lt; cpuCount; i += 1) {
    cluster.fork();
  }

  // Listen for dying workers
  cluster.on(&#39;exit&#39;, function (worker) {

    // Replace the dead worker, we&#39;re not sentimental
    console.log(&#39;Worker &#39; + worker.id + &#39; died :(&#39;);
    cluster.fork();

  });

// Code to run if we&#39;re in a worker process
} else {
  // your application ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Résultats&lt;/h3&gt;

&lt;p&gt;On s&#39;aperçoit que la mise en œuvre du module cluster est particulièrement payante :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                                   &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 17- Tous les films (disque) 300 users / cluster   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 181      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 22207     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3993               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3800       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 165          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 18- 300 1ères comédies 300 users / cluster        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 206      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 26417     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3149               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 434        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 145          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;si on passe les tests avec seulement 100 utilisateurs :&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                                   &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 19- Tous les films (disque) 100 users / cluster   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 20- 300 1ères comédies 100 users / cluster        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Pas de changement par rapport à la version sans le module cluster pour le même scénario, donc le module cluster n&#39;est intéressant qu&#39;à partir d&#39;un certain nombre d&#39;utilisateurs.&lt;/p&gt;

&lt;h2&gt;Utilisation d&#39;Express 4&lt;/h2&gt;

&lt;p&gt;J&#39;ai ensuite procédé à la mise à jour d&#39;express et relancé les tests sur les 2 services (optimisés) avec 300 utilisateurs :&lt;/p&gt;

&lt;h3&gt;Résultats&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                                   &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 21- Tous les films (disque) 300 users / cluster   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 196      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 25436     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 1777               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 2787       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 152          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 22- 300 1ères comédies 300 users / cluster        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 232      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 29789     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 191                &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 129          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;On note que la mise à jour en version 4.1.x d&#39;Express met un sérieux coup de boost à l&#39;application.&lt;/p&gt;

&lt;h2&gt;1ère consolidation&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;                                                           &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Nb Req/s &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &amp;lt; 800ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; 800ms &amp;lt; t &amp;lt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; t &gt; 1200ms &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt; Durée (secs) &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; 01- Tous les films (node 0.6 fichier en mémoire)          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 1578         &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 02- Tous les films (node 0.6 fichier sur disque)          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 03- 300 1ères comédies (node 0.6)                         &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 04- 300 1ères (node 0.6) optimisation 1                   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 05- 300 1ères (node 0.6) optimisation 2                   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 06- Tous les films (node 0.11 fichier sur disque)         &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 07- 300 1ères (node 0.11) optimisation 2                  &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 08- 300 1ères (node 0.11) maxSockets=5                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 09- 300 1ères (node 0.11) maxSockets=50                   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 10- 300 1ères (node 0.11) maxSockets=150                  &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 11- 300 1ères pas d&#39;optimisation 100-&gt;300 users           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 132      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9008      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5926               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 15066      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 227          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 12- 300 1ères optimisation 1 100-&gt;300 users               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 138      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9411      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5936               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14653      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 217          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 13- 300 1ères optimisation 2 100-&gt;300 users               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 132      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9264      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 4434               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 16302      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 227          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 14- 300 1ères maxSockets=400 100-&gt;300 users               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 130      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 9173      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6322               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14505      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 230          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 15- 300 1ères maxSockets=10  100-&gt;300 users               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 130      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 5957      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 7220               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 16823      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 230          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 16- Tous les films (fichier sur disque) 300 users         &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 141      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 8558      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 6487               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 14955      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 213          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 17- Tous les films (disque) 300 users / cluster           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 181      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 22207     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3993               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3800       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 165          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 18- 300 1ères comédies 300 users / cluster                &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 206      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 26417     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 3149               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 434        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 145          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 19- Tous les films (disque) 100 users / cluster           &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 20- 300 1ères comédies 100 users / cluster                &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 99       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 10000     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;                    &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 100          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 21- Tous les films (disque) 300 users / cluster exp. v4   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 196      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 25436     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 1777               &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 2787       &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 152          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; 22- 300 1ères comédies 300 users / cluster exp. v4        &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 232      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 29789     &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 191                &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;            &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 129          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h2&gt;Conclusion n°1&lt;/h2&gt;

&lt;p&gt;Pour le moment, les seul réels axes d&#39;optimisation concernent les I/O, le module cluster et la mise à jour majeure d&#39;Express. L&#39;exercice suivant (à venir) sera de comparer avec d&#39;autres stacks mais aussi avec un backend (type base de données) pour avoir une idée plus précise. Faites des tests suffisamment &quot;stressants&quot; pour noter les différences (ex module cluster). Et bien sûr, faites attention au développeur :).&lt;/p&gt;
</description>
				<link>http://k33g.github.com/2014/04/28/NODE-PERFS.html</link>
			</item>
		
			<item>
				<title>DevoxxFR2014</title>
				<description>&lt;h1&gt;Devoxx France Ed° 2014 : &quot;Lavage de cerveau&quot;&lt;/h1&gt;

&lt;p&gt;C&#39;est la 2ème fois que j&#39;avais la chance d&#39;aller à &lt;strong&gt;Devoxx (France)&lt;/strong&gt;. La 1ère fois ce fut grâce à un concours organisé par le &lt;a href=&quot;http://www.touilleur-express.fr/&quot;&gt;Touilleur Express&lt;/a&gt;, et la 2ème fois, fierté ultime (et surprise), comme speaker!!!.&lt;/p&gt;

&lt;p&gt;J&#39;ai pu faire un &quot;tools in action&quot; : &lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/HUY-998/Golo,%20de%20la%20sucrette%20syntaxique%20pour%20vos%20applications%20Java&quot;&gt;Golo, de la sucrette syntaxique pour vos applications Java&lt;/a&gt;, format très intéressant où l&#39;on dispose de 30 minutes pour présenter un sujet avec des démos à la clef, en général en petit comité.&lt;/p&gt;

&lt;p&gt;Ensuite j&#39;ai été co-speaker de la conférence &lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/TYU-863/Web%20performances,%20regardons%20les%20r%C3%A9sultats%20de%20pr%C3%A8s&quot;&gt;Web performances, regardons les résultats de près&lt;/a&gt; par &lt;strong&gt;Jeff Maury&lt;/strong&gt;. Les autres co-speakers étant &lt;strong&gt;Rémi Forax&lt;/strong&gt;, &lt;strong&gt;Nicolas Leroux&lt;/strong&gt; et nous avons aussi été bien aidés par &lt;strong&gt;Emmanuel Hugonnet&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Surprise, excitation, trouille, excitation, trouille, ...&lt;/h2&gt;

&lt;p&gt;Alors, une fois la surprise passée d&#39;avoir était accepté, je crois me souvenir avoir dansé la danse de la victoire dans mon salon (enfin un petit sautillement cadencé ... je suis un piètre danseur), puis avoir répété à tout le monde au boulot que j&#39;allais à &lt;strong&gt;Devoxx&lt;/strong&gt;, puis ... passer en mode &quot;panique&quot; : &lt;em&gt;mais qu&#39;est-ce que j&#39;ai pas fait !?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Autant la prez sur &lt;strong&gt;Golo&lt;/strong&gt;, je commence à connaître mon sujet, donc pas de souci, ... enfin c&#39;est ce que je croyais : c&#39;est un sacré travail de préparation, 30 minutes c&#39;est à la fois court et long. Autant dans les JUG, on m&#39;a laissé le temps de m&#39;étendre, autant là, je dois passer des messages en peu de temps, du coup j&#39;ai du trier mes exemples, les simplifier, les adapter ...&lt;/p&gt;

&lt;p&gt;Mais la prez sur les &lt;strong&gt;Web performances&lt;/strong&gt; ... je me retrouvais face à des lascars &quot;assez connus&quot; et d&#39;un niveau qui n&#39;est plus à démontrer, donc j&#39;étais un peu dans mes petits souliers. Surtout que nous ne nous connaissions pas, et que tout s&#39;est préparé à distance (mais aussi beaucoup dans la &quot;speakers room&quot;).&lt;/p&gt;

&lt;p&gt;Et finalement, le moment venu j&#39;ai beaucoup plus stressé sur le Tools in Action avec peu de personnes que la Conférence à 4 avec une salle comble.&lt;/p&gt;

&lt;h2&gt;Et Devoxx dans tout ça ?&lt;/h2&gt;

&lt;p&gt;Mon stress de &quot;jeune&quot; speaker m&#39;a un peu interdit de pouvoir tout voir en termes de présentations, mais j&#39;ai retenu (dans ce que j&#39;ai vu et qui m&#39;a beaucoup plus) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://restx.io/&quot;&gt;RESTX&lt;/a&gt; : &lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/GDG-909/Soyons%20RESTful%20avec%20RESTX&quot;&gt;Soyons RESTful avec RESTX&lt;/a&gt; par &lt;strong&gt;Xavier Hanin&lt;/strong&gt; (le créateur de RESTX). Non seulement Xavier est excellent en démo (code en live), mais en plus son framework web est particulièrement intéressant (donc un truc de plus dans ma to do list)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/FCN-711/Des%20applications%20r%C3%A9actives%20avec%20Spring%204,%20AngularDart%20et%20Websocket&quot;&gt;Des applications réactives avec Spring 4, AngularDart et Websocket&lt;/a&gt; par &lt;strong&gt;Sébastien Deleuze&lt;/strong&gt;. Ce qui m&#39;intéressait était surtout la partie front (Angular+Dart), et franchement la démo de Sébastien était bien rodée ... Et il faut réellement que je me mette à Dart.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/FIT-652/Groovy%20en%202014%20et%20au-del%C3%A0&quot;&gt;Groovy en 2014 et au-delà&lt;/a&gt; par &lt;strong&gt;Guillaume Laforge&lt;/strong&gt;. En tant que &quot;Golo Dancer&quot;, je me devais d&#39;assister à la présentation de Guillaume. Je n&#39;ai pas été déçu, Groovy est un langage puissant (agréable à utiliser), les nouveautés qui m&#39;intéressent le plus sont les &lt;strong&gt;traits&lt;/strong&gt; et le &lt;strong&gt;parseur json&lt;/strong&gt;. Je   précise que Guillaume est un personnage très sympathique qui m&#39;a fait l&#39;honneur d&#39;assister à mon tools in action (non, non ça ne m&#39;a pas stressé du tout), j&#39;ai pu aussi échanger (sur des sujets autres que techniques) avec &lt;strong&gt;Cédric Champeau&lt;/strong&gt;, dont j&#39;ai malheureusement loupé la prez (la prochaine fois), elle est bien sympa la team Groovy.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cfp.devoxx.fr/devoxxfr2014/talk/JEJ-167/Eigenharp&quot;&gt;Programmer avec Emotion&lt;/a&gt; par &lt;strong&gt;Geert Bevin&lt;/strong&gt;, alors c&#39;est difficile à résumer (je vous engage à aller voir cette keynote quand elle sera publier sur Parleys), mais qu&#39;est ce que ça m&#39;a fait du bien! On a un beau métier quand même et l&#39;ensemble des possibles est immense.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Oui mais et Devoxx dans tout ça ?&lt;/h2&gt;

&lt;p&gt;Alors ce que j&#39;ai retenu de ces 3 jours :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Les &lt;strong&gt;Organisateurs&lt;/strong&gt; : chapeau! Patience, gentillesse, etc. ... Un grand merci tout particulièrement à &lt;strong&gt;Audrey Neveu&lt;/strong&gt;, qui arrive à prendre le temps de dire un petit mot avec un grand sourire malgré tout ce monde (et ça quand tu arrives un chouilla stressé, c&#39;est énorme), à &lt;strong&gt;Nicolas Martignole&lt;/strong&gt; pour ses encouragements, à &lt;strong&gt;Jean-Laurent de Morlhon&lt;/strong&gt; pour ses conseils (je suis à fond pour une prochaine prez) et à tous les autres parce que : &quot;respect!!!&quot;&lt;/li&gt;
&lt;li&gt;Tous les gens que j&#39;ai rencontrés, ceux que je connaissais déjà &quot;en vrai&quot;, ceux que je ne connaissais que virtuellement (et du coup je connais réellement la dream team complète de &lt;a href=&quot;http://www.typeunsafe.org/&quot;&gt;TypeUnsafe&lt;/a&gt;), les nouvelles rencontre sur place, des futurs collègues de boulot, revoir un ami après de très longues années ...&lt;/li&gt;
&lt;li&gt;Si vous voulez vous lancer dans l&#39;aventure d&#39;être speaker : la présentation à plusieurs c&#39;est assez sympa, j&#39;ai rarement autant appris de gens (j&#39;avais quand même des très bons ;)) et rien que le fait de ne pas être tout seul ça diminue fortement l&#39;anxiété. Et un autre point, en général le public est sympa, il comprend que l&#39;exercice n&#39;est pas simple, et tant que vous avez quelque chose à dire (d&#39;intéressant et que vous y croyez) peu importe si vous bégayez pour le dire :)&lt;/li&gt;
&lt;li&gt;Les speakers sont sympas!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Henri&lt;/strong&gt; a une sacrée santé&lt;/li&gt;
&lt;li&gt;Vivement l&#39;an prochain :)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Voilà. J&#39;ai eu 3 jours de vacances de geek et je suis heureux.&lt;/p&gt;
</description>
				<link>http://k33g.github.com/2014/04/26/DEVOXXFR14.html</link>
			</item>
		
	</channel>
</rss>